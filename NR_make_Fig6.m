% NR_make_Fig6      graphics for Figure 6 in Stark, Levi, Rotstein, 2022
%
% This script creates the sub-figures that compose Figure 6 in 
% Stark, Levi, Rotstein, 2022, PLOS Computational Biology

% Figure 6: Intrinsic network resonance can be generated by combining frequency-dependent 
% mechanisms at the level of postsynaptic potentials and at the spiking level
% (A-D) Network resonance in a model with high-pass filtering in a LIF and synaptic low-pass filtering (EPSP, synaptic depression)

%
% Calls      NR_sinusoids_to_cmodel,NR_sinusoids_to_cmodel_run    
%
% 08-aug-21 ES

% last update
% 01-jul-22 AL


function NR_make_Fig6(savef, pstr, outdir )

% constants
prefix                          = 'resonance_network';
renderer_name                   = 'painters';
resize                          = '-bestfit';
color_output                    = [ 0 0 0 ];                                % output (Vm/spikes): black 

colors_synp                     = [ 1 0 0; 0 0 0; 0 0 1; 0 0.7 0 ];
synmodels_sth                   = { 'null', 'DF', 'F', 'D' };

% arguments
nargs                           = nargin;
if nargs < 1 || isempty( savef )
    savef                       = 1;
end
if nargs < 2 || isempty( pstr )
    pstr                        = '-dpdf';
end
if nargs < 3 || isempty( outdir )
    outdir                      = pwd;
end

% ----------------------------------------------------------------------
% (A-D) Network resonance in a model with high-pass filtering in a LIF and synaptic low-pass filtering
% ----------------------------------------------------------------------

% general parameters:
spike_width                 = 2;
spike_color                 = [ 1 1 1 ] * 0.5;

Gs_LIF_syn                  = 0.175;%2;
Es_LIF_syn                  = 0;
Ibias_LIF_syn               = 1.2;

Tlong_sth                   = 20;
fvals_sth                   = ( 1 : 40 );
fROI                        = [ 0 40 ];

dflag                       = 0;

Dn_syn                      = 0.05;
Vth_LIF_syn                 = -50;

SD_Out_LIF_syn              = 0.1;

% differences for sub-threshold:
Ibias_LIF_syn_sth           = Ibias_LIF_syn;
Vth_LIF_syn_sth             = 0;

%---------------------------------------------------------
% spiking example:

synmodels                   = { 'D', 'null' };
nmodels                     = length( synmodels );

for k                       = 1 : nmodels
    
    % what to show in the traces examples
    fvals_slct          	= [ 1 10 20 40 ];                        	% Inap - 4, 8, 16
    nfvals               	= length( fvals_slct );
    ncycles              	= 10;
    synmodel                = synmodels{ k };
    
    % 2D firing rate map (rate vs. frequency and phase)
    fvals_all               = [ fvals_sth( : ); fvals_slct( : ) ];
    fvals_all               = min( fvals_all ) : max( fvals_all );
    [ ~, ~, ~, ~, s ]       = NR_sinusoids_to_cmodel( 'LIF_syn', 'Tlong', Tlong_sth, 'fvals', fvals_all ...
        , 'Dn', Dn_syn, 'Gs_LIF_syn', Gs_LIF_syn, 'Es_LIF_syn', Es_LIF_syn ...
        , 'nreps', 1, 'graphics', [ 0 1 0 0 ], 'synmodel_LIF_syn', synmodel ...
        , 'Ibias', Ibias_LIF_syn, 'Vth_LIF_syn', Vth_LIF_syn, 'SD_Out_LIF_syn', SD_Out_LIF_syn ...
        , 'dflag', dflag ...
        );
    fig12( 1, k )                  = gcf;

    % subthreshold (impedance) profile
    [ ~, ~, ~, ~, sth ]      = NR_sinusoids_to_cmodel( 'LIF_syn', 'Tlong', Tlong_sth, 'fvals', fvals_all ...
        , 'Dn', Dn_syn, 'Gs_LIF_syn', Gs_LIF_syn, 'Es_LIF_syn', Es_LIF_syn ...
        , 'nreps', 1, 'graphics', [ 0 0 0 0 ], 'synmodel_LIF_syn', synmodel ...
        , 'Ibias', Ibias_LIF_syn_sth, 'Vth_LIF_syn', Vth_LIF_syn_sth, 'SD_Out_LIF_syn', SD_Out_LIF_syn ...
        , 'dflag', dflag ...
        );
    
    % firing rate and coherence
    fig12( 2, k )             = figure;
    subplot( 3, 2, 1 ) % firing rate
    ph                        = plot( s.fbins, s.frate_vec, '.-b' );
    set( ph, 'color', color_output )
    ylims                     = ylim;
    ylims                     = [ 0 max( ylims( : ) ) ];
    set( gca, 'tickdir', 'out', 'box', 'off', 'ylim', ylims )
    ylabel( 'Firing rate [spks/s]' )
    title( sprintf( 'I_{bias} = %0.3g; Dn = %0.3g', Ibias_LIF_syn, Dn_syn ) );
    axis square
    if k == 2
        figure( fig12( 2, 1 ) )
        subplot( 3, 2, 1 )
        ylims               = ylim;
        hold on
        ph                	= plot( s.fbins, s.frate_vec, '.-b' );
        cj               	= ismember( synmodels_sth, synmodel );
        set( ph, 'color', colors_synp( cj, : ), 'linewidth', 2 );
        ylim( ylims )
        figure( fig12( 2, k ) )
    end
    
    subplot( 3, 2, 3 ) % coherence
    ph                      = plot( s.fo( s.fidx ), s.cohs( s.fidx ), '.-k' );
    set( ph, 'color', color_output )
    ylims                   = ylim;
    ylims                   = [ 0 max( ylims( : ) ) ];
    set( gca, 'tickdir', 'out', 'box', 'off', 'ylim', ylims )
    ylabel( 'Coherence' )
    xlabel( 'Frequency [Hz]' )
    axis square
    if k == 2
        figure( fig12( 2, 1 ) )
        subplot( 3, 2, 3 )
        ylims               = ylim;
        hold on
        ph                  = plot( s.fo( s.fidx ), s.cohs( s.fidx ), '.-k' );
        cj               	= ismember( synmodels_sth, synmodel );
        set( ph, 'color', colors_synp( cj, : ), 'linewidth', 2 );
        ylim( ylims )
        figure( fig12( 2, k ) )
    end
    
    subplot( 3, 2, 5 ) % steady state EPSP (sth)
    ph                  	= plot( sth.tfvals, sth.mvals, '-b' );
    set( ph, 'color', [ 0 0 0 ], 'linewidth', 2 );
    xlim( fROI )
    set( gca, 'tickdir', 'out', 'box', 'off' )
    xlabel( 'Presynaptic spike rate [spks/s]' )
    ylabel( 'Steady-state EPSP [mV]' )
    axis square
    %title( sprintf( 'I_{bias} = %0.3g', Ibias_LIF_syn_sth ) );
   
    ylims                   = NaN( nfvals, 2 );
    for j                	= 1 : nfvals
        f                 	= fvals_slct( j );
        [ ~, fidx ]      	= min( abs( s.zfvals - f ) );
        
        subplot( nfvals, 2, 2 * ( j - 1 ) + 2 )
        tlim                = [ 0 ncycles / f ];
        tidx                = s.t >= tlim(1) & s.t <= tlim(2);       %inrange( s.t, tlim );
        t                 	= s.t( tidx );
        y                 	= s.Vmat( tidx, fidx );
        ph                	= plot( t, y, 'b' );
        set( ph, 'color', color_output );
        axis tight
        xlim( [ 0 max( xlim ) ] )
        ylims( j, : )       = ylim;
        title( sprintf( '%0.3g Hz', f ) )
        ylabel( 'V [mV]' )
        if j == nfvals
            xlabel( 'Time [s]' )
        end
        
    end
    
    ylims                       = [ min( ylims( :, 1 ) ) max( ylims( :, 2 ) ) ] + [ -0.1 0.5 ];
    
    for j                       = 1 : nfvals
        subplot( nfvals, 2, 2 * ( j - 1 ) + 2 )
        f                       = fvals_slct( j );
        [ ~, fidx ]             = min( abs( s.zfvals - f ) );
        tlim                    = [ 0 ncycles / f ];
        tidx                    = s.t >= tlim(1) & s.t <= tlim(2);       %inrange( s.t, tlim );
        st                      = s.mat_in( tidx, fidx );
        plot_raster( { s.t( find( st ) ) }, [], ylims( 1 ) + diff( ylims ) / 4, diff( ylims ) / 2, spike_width, spike_color );
        set( gca, 'tickdir', 'out', 'box', 'off', 'ylim', ylims + [ -1 0 ] )
    end
    
end % k
%---------------------------------------------------------
% parameters:

Gs_LIF_syn                  = 0.175; % was 0.2
Es_LIF_syn                  = 0;
%    Ibias_LIF_syn               = 1.3;

Tlong_sth                   = 20;
fvals_sth                   = ( 1 : 40 );
if length( fvals_sth ) == 2
    sig                     = 'chirp';
else
    sig                     = 'sines';
end

dflag                       = 0;

% specific parameters for spiking:
Vth_LIF_syn                 = -50;

%---------------------------------------------------------
% parameter search: 2D plots with Noise, Gs, Vth, and El levels
Gl_LIF_syn                  = 0.1; 
El_LIF_syn                  = -65; 

Vr_LIF_syn                  = -70;
model                       = 'LIF_syn';
synmodel                    = 'D';
gmode                       = { 'imagesc' };
[ ~, ~, ~, figs ]           = NR_sinusoids_to_cmodel_run( model, sig, 'Dn' ...
    , 'savedata', 0, 'savefig', 0, 'gmode', gmode, 'nFFT', 1250 ...
    , 'param_fvals', fvals_sth, 'param_Tlong', Tlong_sth ...
    , 'Gl', Gl_LIF_syn, 'El', El_LIF_syn, 'Vr', Vr_LIF_syn, 'Vth', Vth_LIF_syn ...
    , 'Gs', Gs_LIF_syn, 'Es', Es_LIF_syn ...
    , 'SD_Out', SD_Out_LIF_syn ...
    , 'synmodel', synmodel, 'dflag', dflag );
fig12( 1, k + 1 )                   = figs;

Vr_LIF_syn                  = -70;
model                       = 'LIF_syn';
synmodel                    = 'D';
gmode                       = { 'imagesc' };
[ ~, ~, ~, figs ]           = NR_sinusoids_to_cmodel_run( model, sig, 'Ibias' ...
    , 'savedata', 0, 'savefig', 0, 'gmode', gmode, 'nFFT', 1250 ...
    , 'param_fvals', fvals_sth, 'param_Tlong', Tlong_sth ...
    , 'Gl', Gl_LIF_syn, 'El', El_LIF_syn, 'Vr', Vr_LIF_syn, 'Vth', Vth_LIF_syn ...
    , 'Gs', Gs_LIF_syn, 'Es', Es_LIF_syn ...
    , 'SD_Out', SD_Out_LIF_syn ...
    , 'synmodel', synmodel, 'dflag', dflag );
fig12( 2, k + 1 )                   = figs;

%-----
fig                         = fig12( fig12 ~= 0 );
if savef
    for i                   = 1 : length( fig )
        figname = [ outdir filesep prefix '_FIG6_part' num2str( i ) ];
        figure( fig( i ) );
        figi              	= gcf;
        figi.Renderer      	= renderer_name;
        pause( 0.2 )
        if isequal( pstr, '-dpdf' )
            rsz          	= resize;
        else
            rsz          	= '';
        end
        print( figi, pstr, figname, rsz )
    end
end
    
return

%EoF
